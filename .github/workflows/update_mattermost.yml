---

name: test
on: [push]
#  schedule:
#    - cron: '0 0 * * *'  # Run daily

defaults:
  run:
    working-directory: 'mattermost'

jobs:
  check-updates-availalbe:
    name: "Is update available?"
    runs-on: ubuntu-latest
    env:
      # GitHub API endpoint for obtaining release information
      mattermost_release_api_url: https://api.github.com/repos/mattermost/mattermost-server/releases/latest

      # Where ansible role variables are stored
      defaults_yml: defaults/main.yml

    steps:
      - uses: actions/checkout@v3
        with:
          path: 'mattermost'

      - name: "Get mattermost versions"
        run: |
          mm_latest=$(curl --silent $mattermost_release_api_url | jq -r .tag_name)
          mm_latest=${mm_latest:1}  # release tags don't contain the 'v'
          echo "mm_latest=$mm_latest" >> $GITHUB_ENV
          echo "Latest mattermost: $mm_latest"

          mm_current=$(grep 'mm_version:' $defaults_yml | awk '{ print $2 }')
          echo "Current mattermost: $mm_current"
          echo "mm_current=$mm_current" >> $GITHUB_ENV
          echo "Latest mattermost: $mm_latest"

      - name: "Update if new version available"
        env:
          new_branch: mattermost_${{ env.mm_latest }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Current: ${{ env.mm_current }}"
          echo "Latest:  ${{ env.mm_latest }}"
          if [ "${{ env.mm_current }}" = "${{ env.mm_latest }}" ]
          then
                echo "No update available"
          else
                echo "Update available"
                git checkout -b ${{ env.new_branch }}
                sed -i "s/mm_version: \"${{ env.mm_current }}\"/mm_version: \"${{ env.mm_latest }}\"/g" ${{ env.defaults_yml }}
                git diff
                git add ${{ env.defaults_yml }}
                git config user.name  pr_bot
                git config user.email pr_bot@noreply.github.com
                git commit -m "Bump mattermost to ${{ env.mm_latest }}"
                git push origin --set-upstream ${{ env.new_branch }} \
                && gh pr create --base master \
                      --title 'Update mattermost to ${{ env.mm_latest }}'\
                      --body 'Version `${{ env.mm_latest }}` is available.'\
                || true
          fi