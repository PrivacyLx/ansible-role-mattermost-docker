---

- name: Install packages
  apt:
    name: git
    state: present

- name: Clone mattermost-docker
  git:
    repo: https://github.com/mattermost/docker
    dest: "{{ mattermost_docker_src_path }}"
    version: "HEAD"
    force: "{{ mattermost_docker_upgrade }}"
    update: "{{ mattermost_docker_upgrade }}"

- name: Copy custom configuration
  template:
    src: env.j2
    dest: "{{ mattermost_docker_src_path }}/.env"
    owner: root
    group: root
    mode: 0640

- name: Check that HTTPs certificates exist
  stat:
    path: "{{mattermost_cert}}"
  register: cert_exists

- name: Create certs directory
  file:
    path: "{{ mattermost_certs_path }}"
    state: directory
  when: not cert_exists.stat.exists

- name: Generate certificates for the first time
  ansible.builtin.command:
    cmd: "docker run -it --rm --name certbot -p 80:80 -v \"{{mattermost_certs_path}}/etc/letsencrypt:/etc/letsencrypt\" -v \"{{mattermost_certs_path}}/lib/letsencrypt:/var/lib/letsencrypt\" certbot/certbot certonly --standalone -d {{mattermost_domain}} --email {{lets_encrypt_email}} --non-interactive --agree-tos"
  when: not cert_exists.stat.exists
  register: certbot_result

- name: Print certificate generation output
  debug:
    var: certbot_result.stdout_lines
  when: not cert_exists.stat.exists

- name: Update volume directory permissions
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ mattermost_docker_uid }}"
    group: "{{ mattermost_docker_gid }}"
    recurse: yes
  with_items:
    - "{{ mattermost_config_path }}"
    - "{{ mattermost_db_path }}"
    - "{{ mattermost_data_path }}"
    - "{{ mattermost_logs_path }}"
    - "{{ mattermost_plugins_path }}"
    - "{{ mattermost_client_path  }}"
    - "{{ mattermost_bleve_indexes_path }}"
    - "{{ mattermost_nginx_config_path }}"

- name: Template systemd unit
  template:
    src: mattermost.service.j2
    dest: /etc/systemd/system/mattermost.service
    owner: root
    group: root
    mode: 0644
  register: unit

- name: Reload daemons
  systemd:
    daemon_reload: yes
  when: unit.changed

- name: Enable service
  systemd:
    name: mattermost.service
    enabled: yes

- name: Build images
  docker_compose:
    project_src: "{{ mattermost_docker_src_path }}"
    files: ["docker-compose.yml", "docker-compose.nginx.yml"]
    state: present
    stopped: yes
    build: "{{ mattermost_docker_upgrade }}"

- name: Start containers
  systemd:
    name: mattermost.service
    state: restarted

- name: User information
  debug:
    msg: You can now login to your Mattermost instance and do the initial setup. Run the restart-mattermost.yml playbook when you are done.
  when: not mattermost_docker_upgrade
